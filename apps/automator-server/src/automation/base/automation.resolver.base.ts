/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Automation } from "./Automation";
import { AutomationCountArgs } from "./AutomationCountArgs";
import { AutomationFindManyArgs } from "./AutomationFindManyArgs";
import { AutomationFindUniqueArgs } from "./AutomationFindUniqueArgs";
import { CreateAutomationArgs } from "./CreateAutomationArgs";
import { UpdateAutomationArgs } from "./UpdateAutomationArgs";
import { DeleteAutomationArgs } from "./DeleteAutomationArgs";
import { CustomActionFindManyArgs } from "../../customAction/base/CustomActionFindManyArgs";
import { CustomAction } from "../../customAction/base/CustomAction";
import { Action } from "../../action/base/Action";
import { AutomationService } from "../automation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Automation)
export class AutomationResolverBase {
  constructor(
    protected readonly service: AutomationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Automation",
    action: "read",
    possession: "any",
  })
  async _automationsMeta(
    @graphql.Args() args: AutomationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Automation])
  @nestAccessControl.UseRoles({
    resource: "Automation",
    action: "read",
    possession: "any",
  })
  async automations(
    @graphql.Args() args: AutomationFindManyArgs
  ): Promise<Automation[]> {
    return this.service.automations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Automation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Automation",
    action: "read",
    possession: "own",
  })
  async automation(
    @graphql.Args() args: AutomationFindUniqueArgs
  ): Promise<Automation | null> {
    const result = await this.service.automation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Automation)
  @nestAccessControl.UseRoles({
    resource: "Automation",
    action: "create",
    possession: "any",
  })
  async createAutomation(
    @graphql.Args() args: CreateAutomationArgs
  ): Promise<Automation> {
    return await this.service.createAutomation({
      ...args,
      data: {
        ...args.data,

        action: args.data.action
          ? {
              connect: args.data.action,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Automation)
  @nestAccessControl.UseRoles({
    resource: "Automation",
    action: "update",
    possession: "any",
  })
  async updateAutomation(
    @graphql.Args() args: UpdateAutomationArgs
  ): Promise<Automation | null> {
    try {
      return await this.service.updateAutomation({
        ...args,
        data: {
          ...args.data,

          action: args.data.action
            ? {
                connect: args.data.action,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Automation)
  @nestAccessControl.UseRoles({
    resource: "Automation",
    action: "delete",
    possession: "any",
  })
  async deleteAutomation(
    @graphql.Args() args: DeleteAutomationArgs
  ): Promise<Automation | null> {
    try {
      return await this.service.deleteAutomation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CustomAction], { name: "customActions" })
  @nestAccessControl.UseRoles({
    resource: "CustomAction",
    action: "read",
    possession: "any",
  })
  async findCustomActions(
    @graphql.Parent() parent: Automation,
    @graphql.Args() args: CustomActionFindManyArgs
  ): Promise<CustomAction[]> {
    const results = await this.service.findCustomActions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Action, {
    nullable: true,
    name: "action",
  })
  @nestAccessControl.UseRoles({
    resource: "Action",
    action: "read",
    possession: "any",
  })
  async getAction(
    @graphql.Parent() parent: Automation
  ): Promise<Action | null> {
    const result = await this.service.getAction(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
