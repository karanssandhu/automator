/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Automation as PrismaAutomation,
  CustomAction as PrismaCustomAction,
  Action as PrismaAction,
} from "@prisma/client";

export class AutomationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AutomationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.automation.count(args);
  }

  async automations(
    args: Prisma.AutomationFindManyArgs
  ): Promise<PrismaAutomation[]> {
    return this.prisma.automation.findMany(args);
  }
  async automation(
    args: Prisma.AutomationFindUniqueArgs
  ): Promise<PrismaAutomation | null> {
    return this.prisma.automation.findUnique(args);
  }
  async createAutomation(
    args: Prisma.AutomationCreateArgs
  ): Promise<PrismaAutomation> {
    return this.prisma.automation.create(args);
  }
  async updateAutomation(
    args: Prisma.AutomationUpdateArgs
  ): Promise<PrismaAutomation> {
    return this.prisma.automation.update(args);
  }
  async deleteAutomation(
    args: Prisma.AutomationDeleteArgs
  ): Promise<PrismaAutomation> {
    return this.prisma.automation.delete(args);
  }

  async findCustomActions(
    parentId: string,
    args: Prisma.CustomActionFindManyArgs
  ): Promise<PrismaCustomAction[]> {
    return this.prisma.automation
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .customActions(args);
  }

  async getAction(parentId: string): Promise<PrismaAction | null> {
    return this.prisma.automation
      .findUnique({
        where: { id: parentId },
      })
      .action();
  }
}
