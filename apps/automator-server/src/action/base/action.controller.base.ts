/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ActionService } from "../action.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ActionCreateInput } from "./ActionCreateInput";
import { Action } from "./Action";
import { ActionFindManyArgs } from "./ActionFindManyArgs";
import { ActionWhereUniqueInput } from "./ActionWhereUniqueInput";
import { ActionUpdateInput } from "./ActionUpdateInput";
import { AutomationFindManyArgs } from "../../automation/base/AutomationFindManyArgs";
import { Automation } from "../../automation/base/Automation";
import { AutomationWhereUniqueInput } from "../../automation/base/AutomationWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ActionControllerBase {
  constructor(
    protected readonly service: ActionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Action })
  @nestAccessControl.UseRoles({
    resource: "Action",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ActionCreateInput,
  })
  async createAction(@common.Body() data: ActionCreateInput): Promise<Action> {
    return await this.service.createAction({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        performedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Action] })
  @ApiNestedQuery(ActionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Action",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async actions(@common.Req() request: Request): Promise<Action[]> {
    const args = plainToClass(ActionFindManyArgs, request.query);
    return this.service.actions({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        performedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Action })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Action",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async action(
    @common.Param() params: ActionWhereUniqueInput
  ): Promise<Action | null> {
    const result = await this.service.action({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        performedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Action })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Action",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ActionUpdateInput,
  })
  async updateAction(
    @common.Param() params: ActionWhereUniqueInput,
    @common.Body() data: ActionUpdateInput
  ): Promise<Action | null> {
    try {
      return await this.service.updateAction({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          description: true,
          performedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Action })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Action",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAction(
    @common.Param() params: ActionWhereUniqueInput
  ): Promise<Action | null> {
    try {
      return await this.service.deleteAction({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          description: true,
          performedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/automations")
  @ApiNestedQuery(AutomationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Automation",
    action: "read",
    possession: "any",
  })
  async findAutomations(
    @common.Req() request: Request,
    @common.Param() params: ActionWhereUniqueInput
  ): Promise<Automation[]> {
    const query = plainToClass(AutomationFindManyArgs, request.query);
    const results = await this.service.findAutomations(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,

        action: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/automations")
  @nestAccessControl.UseRoles({
    resource: "Action",
    action: "update",
    possession: "any",
  })
  async connectAutomations(
    @common.Param() params: ActionWhereUniqueInput,
    @common.Body() body: AutomationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      automations: {
        connect: body,
      },
    };
    await this.service.updateAction({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/automations")
  @nestAccessControl.UseRoles({
    resource: "Action",
    action: "update",
    possession: "any",
  })
  async updateAutomations(
    @common.Param() params: ActionWhereUniqueInput,
    @common.Body() body: AutomationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      automations: {
        set: body,
      },
    };
    await this.service.updateAction({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/automations")
  @nestAccessControl.UseRoles({
    resource: "Action",
    action: "update",
    possession: "any",
  })
  async disconnectAutomations(
    @common.Param() params: ActionWhereUniqueInput,
    @common.Body() body: AutomationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      automations: {
        disconnect: body,
      },
    };
    await this.service.updateAction({
      where: params,
      data,
      select: { id: true },
    });
  }
}
