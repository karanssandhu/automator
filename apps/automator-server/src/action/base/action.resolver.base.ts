/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Action } from "./Action";
import { ActionCountArgs } from "./ActionCountArgs";
import { ActionFindManyArgs } from "./ActionFindManyArgs";
import { ActionFindUniqueArgs } from "./ActionFindUniqueArgs";
import { CreateActionArgs } from "./CreateActionArgs";
import { UpdateActionArgs } from "./UpdateActionArgs";
import { DeleteActionArgs } from "./DeleteActionArgs";
import { AutomationFindManyArgs } from "../../automation/base/AutomationFindManyArgs";
import { Automation } from "../../automation/base/Automation";
import { User } from "../../user/base/User";
import { ActionService } from "../action.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Action)
export class ActionResolverBase {
  constructor(
    protected readonly service: ActionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Action",
    action: "read",
    possession: "any",
  })
  async _actionsMeta(
    @graphql.Args() args: ActionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Action])
  @nestAccessControl.UseRoles({
    resource: "Action",
    action: "read",
    possession: "any",
  })
  async actions(@graphql.Args() args: ActionFindManyArgs): Promise<Action[]> {
    return this.service.actions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Action, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Action",
    action: "read",
    possession: "own",
  })
  async action(
    @graphql.Args() args: ActionFindUniqueArgs
  ): Promise<Action | null> {
    const result = await this.service.action(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Action)
  @nestAccessControl.UseRoles({
    resource: "Action",
    action: "create",
    possession: "any",
  })
  async createAction(@graphql.Args() args: CreateActionArgs): Promise<Action> {
    return await this.service.createAction({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Action)
  @nestAccessControl.UseRoles({
    resource: "Action",
    action: "update",
    possession: "any",
  })
  async updateAction(
    @graphql.Args() args: UpdateActionArgs
  ): Promise<Action | null> {
    try {
      return await this.service.updateAction({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Action)
  @nestAccessControl.UseRoles({
    resource: "Action",
    action: "delete",
    possession: "any",
  })
  async deleteAction(
    @graphql.Args() args: DeleteActionArgs
  ): Promise<Action | null> {
    try {
      return await this.service.deleteAction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Automation], { name: "automations" })
  @nestAccessControl.UseRoles({
    resource: "Automation",
    action: "read",
    possession: "any",
  })
  async findAutomations(
    @graphql.Parent() parent: Action,
    @graphql.Args() args: AutomationFindManyArgs
  ): Promise<Automation[]> {
    const results = await this.service.findAutomations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Action): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
