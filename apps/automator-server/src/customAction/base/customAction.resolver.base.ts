/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CustomAction } from "./CustomAction";
import { CustomActionCountArgs } from "./CustomActionCountArgs";
import { CustomActionFindManyArgs } from "./CustomActionFindManyArgs";
import { CustomActionFindUniqueArgs } from "./CustomActionFindUniqueArgs";
import { CreateCustomActionArgs } from "./CreateCustomActionArgs";
import { UpdateCustomActionArgs } from "./UpdateCustomActionArgs";
import { DeleteCustomActionArgs } from "./DeleteCustomActionArgs";
import { User } from "../../user/base/User";
import { Automation } from "../../automation/base/Automation";
import { CustomActionService } from "../customAction.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CustomAction)
export class CustomActionResolverBase {
  constructor(
    protected readonly service: CustomActionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CustomAction",
    action: "read",
    possession: "any",
  })
  async _customActionsMeta(
    @graphql.Args() args: CustomActionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CustomAction])
  @nestAccessControl.UseRoles({
    resource: "CustomAction",
    action: "read",
    possession: "any",
  })
  async customActions(
    @graphql.Args() args: CustomActionFindManyArgs
  ): Promise<CustomAction[]> {
    return this.service.customActions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CustomAction, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CustomAction",
    action: "read",
    possession: "own",
  })
  async customAction(
    @graphql.Args() args: CustomActionFindUniqueArgs
  ): Promise<CustomAction | null> {
    const result = await this.service.customAction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomAction)
  @nestAccessControl.UseRoles({
    resource: "CustomAction",
    action: "create",
    possession: "any",
  })
  async createCustomAction(
    @graphql.Args() args: CreateCustomActionArgs
  ): Promise<CustomAction> {
    return await this.service.createCustomAction({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        automation: args.data.automation
          ? {
              connect: args.data.automation,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomAction)
  @nestAccessControl.UseRoles({
    resource: "CustomAction",
    action: "update",
    possession: "any",
  })
  async updateCustomAction(
    @graphql.Args() args: UpdateCustomActionArgs
  ): Promise<CustomAction | null> {
    try {
      return await this.service.updateCustomAction({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          automation: args.data.automation
            ? {
                connect: args.data.automation,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomAction)
  @nestAccessControl.UseRoles({
    resource: "CustomAction",
    action: "delete",
    possession: "any",
  })
  async deleteCustomAction(
    @graphql.Args() args: DeleteCustomActionArgs
  ): Promise<CustomAction | null> {
    try {
      return await this.service.deleteCustomAction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: CustomAction): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Automation, {
    nullable: true,
    name: "automation",
  })
  @nestAccessControl.UseRoles({
    resource: "Automation",
    action: "read",
    possession: "any",
  })
  async getAutomation(
    @graphql.Parent() parent: CustomAction
  ): Promise<Automation | null> {
    const result = await this.service.getAutomation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
