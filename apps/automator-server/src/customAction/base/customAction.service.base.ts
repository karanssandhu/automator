/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CustomAction as PrismaCustomAction,
  User as PrismaUser,
  Automation as PrismaAutomation,
} from "@prisma/client";

export class CustomActionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomActionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customAction.count(args);
  }

  async customActions(
    args: Prisma.CustomActionFindManyArgs
  ): Promise<PrismaCustomAction[]> {
    return this.prisma.customAction.findMany(args);
  }
  async customAction(
    args: Prisma.CustomActionFindUniqueArgs
  ): Promise<PrismaCustomAction | null> {
    return this.prisma.customAction.findUnique(args);
  }
  async createCustomAction(
    args: Prisma.CustomActionCreateArgs
  ): Promise<PrismaCustomAction> {
    return this.prisma.customAction.create(args);
  }
  async updateCustomAction(
    args: Prisma.CustomActionUpdateArgs
  ): Promise<PrismaCustomAction> {
    return this.prisma.customAction.update(args);
  }
  async deleteCustomAction(
    args: Prisma.CustomActionDeleteArgs
  ): Promise<PrismaCustomAction> {
    return this.prisma.customAction.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.customAction
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getAutomation(parentId: string): Promise<PrismaAutomation | null> {
    return this.prisma.customAction
      .findUnique({
        where: { id: parentId },
      })
      .automation();
  }
}
